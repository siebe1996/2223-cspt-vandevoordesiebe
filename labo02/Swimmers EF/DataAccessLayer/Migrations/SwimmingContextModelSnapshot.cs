// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(SwimmingContext))]
    partial class SwimmingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Globals.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Globals.Entities.SwimmingPool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LaneLength")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SwimmingPools");
                });

            modelBuilder.Entity("Globals.Entities.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("Schedule")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SwimmingPoolId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("SwimmingPoolId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("SwimmerWorkout", b =>
                {
                    b.Property<int>("SwimmersId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutsId")
                        .HasColumnType("int");

                    b.HasKey("SwimmersId", "WorkoutsId");

                    b.HasIndex("WorkoutsId");

                    b.ToTable("SwimmerWorkout");
                });

            modelBuilder.Entity("Globals.Entities.Coach", b =>
                {
                    b.HasBaseType("Globals.Entities.Member");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("Globals.Entities.Swimmer", b =>
                {
                    b.HasBaseType("Globals.Entities.Member");

                    b.Property<int>("FinaPoints")
                        .HasColumnType("int");

                    b.ToTable("Swimmers");
                });

            modelBuilder.Entity("Globals.Entities.Workout", b =>
                {
                    b.HasOne("Globals.Entities.Coach", "Coach")
                        .WithMany("Workouts")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Globals.Entities.SwimmingPool", "SwimmingPool")
                        .WithMany()
                        .HasForeignKey("SwimmingPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("SwimmingPool");
                });

            modelBuilder.Entity("SwimmerWorkout", b =>
                {
                    b.HasOne("Globals.Entities.Swimmer", null)
                        .WithMany()
                        .HasForeignKey("SwimmersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Globals.Entities.Workout", null)
                        .WithMany()
                        .HasForeignKey("WorkoutsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Globals.Entities.Coach", b =>
                {
                    b.HasOne("Globals.Entities.Member", null)
                        .WithOne()
                        .HasForeignKey("Globals.Entities.Coach", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Globals.Entities.Swimmer", b =>
                {
                    b.HasOne("Globals.Entities.Member", null)
                        .WithOne()
                        .HasForeignKey("Globals.Entities.Swimmer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Globals.Entities.Coach", b =>
                {
                    b.Navigation("Workouts");
                });
#pragma warning restore 612, 618
        }
    }
}
